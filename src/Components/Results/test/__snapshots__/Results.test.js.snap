// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Results handleClick should render like the snapshot 1`] = `undefined`;

exports[`Results should render like the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Results />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <p
          className="results-title"
        >
          !
        </p>,
        <p
          className="results-correct-country"
        >
           was the correct answer
        </p>,
        <p
          className="points-gained"
        >
          <strong>
            +
          </strong>
           pts
        </p>,
        <div
          className="results-divider"
        />,
        <p>
          Total
        </p>,
        <p
          className="total-points-count"
        />,
        <div
          className="button results-continue"
          onClick={[Function]}
        >
          Continue
        </div>,
      ],
      "className": "Results",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            undefined,
            "!",
          ],
          "className": "results-title",
        },
        "ref": null,
        "rendered": Array [
          undefined,
          "!",
        ],
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            undefined,
            " was the correct answer",
          ],
          "className": "results-correct-country",
        },
        "ref": null,
        "rendered": Array [
          undefined,
          " was the correct answer",
        ],
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <strong>
              +
            </strong>,
            " pts",
          ],
          "className": "points-gained",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "+",
                undefined,
              ],
            },
            "ref": null,
            "rendered": Array [
              "+",
              undefined,
            ],
            "type": "strong",
          },
          " pts",
        ],
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "results-divider",
        },
        "ref": null,
        "rendered": null,
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Total",
        },
        "ref": null,
        "rendered": "Total",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": undefined,
          "className": "total-points-count",
        },
        "ref": null,
        "rendered": null,
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Continue",
          "className": "button results-continue",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Continue",
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <p
            className="results-title"
          >
            !
          </p>,
          <p
            className="results-correct-country"
          >
             was the correct answer
          </p>,
          <p
            className="points-gained"
          >
            <strong>
              +
            </strong>
             pts
          </p>,
          <div
            className="results-divider"
          />,
          <p>
            Total
          </p>,
          <p
            className="total-points-count"
          />,
          <div
            className="button results-continue"
            onClick={[Function]}
          >
            Continue
          </div>,
        ],
        "className": "Results",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              undefined,
              "!",
            ],
            "className": "results-title",
          },
          "ref": null,
          "rendered": Array [
            undefined,
            "!",
          ],
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              undefined,
              " was the correct answer",
            ],
            "className": "results-correct-country",
          },
          "ref": null,
          "rendered": Array [
            undefined,
            " was the correct answer",
          ],
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <strong>
                +
              </strong>,
              " pts",
            ],
            "className": "points-gained",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "+",
                  undefined,
                ],
              },
              "ref": null,
              "rendered": Array [
                "+",
                undefined,
              ],
              "type": "strong",
            },
            " pts",
          ],
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "results-divider",
          },
          "ref": null,
          "rendered": null,
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Total",
          },
          "ref": null,
          "rendered": "Total",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": undefined,
            "className": "total-points-count",
          },
          "ref": null,
          "rendered": null,
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Continue",
            "className": "button results-continue",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Continue",
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
